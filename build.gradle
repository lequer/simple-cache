apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'

// apply plugin: 'sonar-runner'
if(!System.env.releaseVersion){
    version =  "$version-SNAPSHOT"}
else {
    version = System.env.releaseVersion
}

jar {
    baseName = 'util'
    version = "$version"
}
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

   repositories {
       mavenCentral()
}


dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
     
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.2'
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
allprojects {
    apply from: "$rootDir/gradle/versioning.gradle"
}
String version = project.version.toString()
uploadArchives {

    if(!System.env.releaseVersion){
        version =  "$version-SNAPSHOT"}
    else {
        version = System.env.releaseVersion
    }
    repositories {
        mavenDeployer {
            snapshotRepository(url: "http://lequer.info:8081/nexus/content/repositories/snapshots") {
                authentication(userName: mavenUser, password: mavenPassword)
            }
            repository(url: "http://lequer.info:8081/nexus/content/repositories/releases") {
                authentication(userName: mavenUser, password: mavenPassword)
            }
            pom.version = "$version"
            pom.artifactId = "cache"
            pom.groupId = "info.lequer"
        }
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

